<?xml version="1.0" encoding="UTF-8"?>
<highlightDefinition version="1.1">
	<name>Javascript</name>

	<!-- Generic block -->
	<blockStartMarker indent="1">\{\s*(?:$|#)</blockStartMarker>
	<blockEndMarker>^\s*\}</blockEndMarker>
	
	<!-- Symbol definitions -->
	<!-- Note that we strip `{` from the matched symbol name. We use the rTrim attribute to tell the
    editor to do this so we can avoid using expensive forward lookaheads in the regex patterns. -->
	<symbols>
		<symbol type="class">
			<entryRegEx>^\s*class [^ {]*</entryRegEx>
		</symbol>
		<symbol type="constructor" rTrim="{">
			<entryRegEx>^\s*constructor\s*\((?:\w|,|\s)*\)\s*\{</entryRegEx>
		</symbol>
		<symbol type="method" rTrim="{">
			<entryRegEx>^\s*(?!for\b|while|do|switch)(static\s*)?\w*=?\s*\(?(?:\w|,|\s)*\)?\s*\{</entryRegEx>
		</symbol>
	</symbols>
	
	<contexts caseSensitive="yes">		
		<highlightContext name="javascriptType" fallback="type">
			<keywords>
				<string>Boolean</string>
				<string>BigInt</string>
				<string>Null</string>
				<string>Number</string>
				<string>String</string>
				<string>Symbol</string>
				<string>Undefined</string>
			</keywords>
		</highlightContext>
	
		<highlightContext name="javascriptKeyword" fallback="keyword">
			<keywords>
				<string>break</string>
				<string>case</string>
				<string>catch</string>
				<string>class</string>
				<string>const</string>
				<string>continue</string>
				<string>debugger</string>
				<string>default</string>
				<string>delete</string>
				<string>do</string>
				<string>else</string>
				<string>export</string>
				<string>extends</string>
				<string>false</string>
				<string>finally</string>
				<string>for</string>
				<string>function</string>
				<string>if</string>
				<string>import</string>
				<string>in</string>
				<string>instanceof</string>
				<string>new</string>
				<string>null</string>
				<string>return</string>
				<string>super</string>
				<string>switch</string>
				<string>this</string>
				<string>throw</string>
				<string>true</string>
				<string>try</string>
				<string>typeof</string>
				<string>var</string>
				<string>void</string>
				<string>while</string>
				<string>with</string>
			</keywords>
		</highlightContext>
		
		<highlightContext name="javascriptSingleQuoteString" fallback="string">
			<startRegEx>'</startRegEx>
			<endRegEx>(((?&lt;!\\)(\\\\)*)|^)'</endRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptDoubleQuoteString" fallback="string">
			<startRegEx>"</startRegEx>
			<endRegEx>(((?&lt;!\\)(\\\\)*)|^)"</endRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptNumber" fallback="number">
			<entryRegEx>(?&lt;=[^\w.]|^)(?=\d+|\d+\.|\.\d+|\d+e(?:\d|\b))((?:\d+_\d+)+n?|\d+n?|\d*\.\d*(?:e[-+]?\d*)?|\d+e[-+]?\d*)(?=[^\w.]|$)|(?&lt;=[^\w.]|^)(?:\d+|0x[[:xdigit:]]*\b|0b[01]*\b|0o[0-7]*\b)(?=[^\w.]|$)</entryRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptSingleLineComment" fallback="comment">
			<startRegEx>\/\/</startRegEx>
			<endRegEx>[\n\r]</endRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptBlockComment" fallback="comment">
			<startRegEx>/\*</startRegEx>
			<endRegEx>\*/</endRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptUnicodeEscapeSequence" fallback="string">
			<entryRegEx>\\u[[:xdigit:]]{4}</entryRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptUnicodeCodepointEscape" fallback="string">
			<entryRegEx>\\u{[[:xdigit:]]+}</entryRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptHashbangComment" fallback="comment">
			<startRegEx>^\#\!</startRegEx>
			<endRegEx>[\n\r]</endRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptUppercaseIdentifier" fallback="uppercaseIdentifier">
			<entryRegEx>\b[A-Z]\w*</entryRegEx>
		</highlightContext>
		
		<highlightContext name="javascriptLowercaseIdentifier" fallback="lowercaseIdentifier">
			<entryRegEx>\b[a-z]\w*</entryRegEx>
		</highlightContext>	
	</contexts>
</highlightDefinition>