<?xml version="1.0" encoding="UTF-8"?>
<highlightDefinition version="1.1">
	<name>C/C++</name>

	<blockStartMarker indent="1">\{\s*(?:$|//|/\*|\\)|\s*/\*\s*$</blockStartMarker>
	<blockEndMarker>^\s*\}|^\s*\*/</blockEndMarker>	
	
	<symbols>
		<symbol type="function">
			<entryRegEx>^[ \t]*(?:[\w0-9_*]+\s+){1,3}[\w0-9_*]+[ \t]*\([\]\[\w0-9_,\s*&amp;&lt;&gt;/]*\)(?!;)(?=\s*\{?)</entryRegEx>
		</symbol>
		
		<symbol type="method">
			<entryRegEx>^[ \t]*(?:[\w0-9_*]+(?:::[\w0-9_]+)?\s+){0,3}[\w0-9_]+::[\w0-9_]+[ \t]*\([\]\[\w0-9_,\s*&amp;&lt;&gt;/]*\)(?=\s*\{?)</entryRegEx>
		</symbol>
		
		<symbol type="class">
			<entryRegEx>^[ \t]*(?:template[\t ]*&lt;[^&gt;]*&gt;[\t\r\n ]*)?class[\t ]([\w0-9_]*)(?:[\t ]*:[\t ]*[\w0-9_]+[\t ][\w0-9_&lt;&gt;]+)?(?=\s*\{?)</entryRegEx>
		</symbol>
		
		<symbol type="#define">
			<entryRegEx>^\s*#define[ \t]*([\w\d()]*)[ \t]+[^\n\r]*[\n\r]</entryRegEx>
		</symbol>				
	
	</symbols>

	<contexts caseSensitive="yes">				
		<highlightContext name="cPreprocessor" fallback="directive">
			<startRegEx>^#</startRegEx>
			<endRegEx>[\n\r]</endRegEx>
			<highlightContext name="cNumber" fallback="number">
			<!-- Highlight numbers within single line preprocessor directives -->
				<entryRegEx>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</entryRegEx>
			</highlightContext>
		</highlightContext>
		
		<highlightContext name="cString" fallback="string">
			<startRegEx>"</startRegEx>
			<endRegEx>(((?&lt;!\\)(\\\\)*)|^)"</endRegEx>
		</highlightContext>
		
		<highlightContext name="cCharacter" fallback="string">
			<startRegEx>'</startRegEx>
			<endRegEx>(\\'')|(.')</endRegEx>
		</highlightContext>

        <highlightContext name="cKeyword" fallback="keyword">
            <keywords>
                <string>break</string>
                <string>case</string>
                <string>continue</string>
                <string>default</string>
                <string>do</string>
                <string>else</string>
                <string>enum</string>
                <string>extern</string>
                <string>for</string>
                <string>goto</string>
                <string>if</string>
                <string>NULL</string>
                <string>void</string>
                <string>return</string>
                <string>sizeof</string>
                <string>struct</string>
                <string>switch</string>
                <string>typedef</string>
                <string>union</string>
                <string>while</string>
                <string>self</string>
                <string>super</string>
                <string>int</string>
                <string>long</string>
                <string>float</string>
                <string>double</string>
                <string>char</string>
                <string>unichar</string>
                <string>unsigned</string>
                <string>signed</string>
                <string>const</string>
                <string>extern</string>
                <string>static</string>
                <string>auto</string>
                <string>register</string>
                <string>short</string>
                <string>volatile</string>
				<string>class</string>
				<string>public</string>
				<string>protected</string>
				<string>private</string>
				<string>this</string>
            </keywords>
        </highlightContext>
		
        <highlightContext name="cNumber" fallback="number">
            <entryRegEx>(?&lt;=[^\w\d]|^)(((([0-9]+\.[0-9]*)|(\.[0-9]+))([eE][+\-]?[0-9]+)?[fFlL]?)|((([1-9][0-9]*)|0[0-7]*|(0[xX][0-9a-fA-F]+))(([uU][lL]?)|([lL][uU]?))?))(?=[^\w\d]|$)</entryRegEx>
        </highlightContext>
		
        <highlightContext name="cIdentifier" fallback="identifier">
            <entryRegEx>([A-Za-z0-9_]+ *)\(</entryRegEx>
        </highlightContext>
		
		<highlightContext name="cComment" fallback="comment">
			<startRegEx>//</startRegEx>
			<endRegEx>[\n\r]</endRegEx>
		</highlightContext>
		
		<highlightContext name="cMultiLineComment" fallback="comment">
			<startRegEx>/\*</startRegEx>
			<endRegEx>\*/</endRegEx>
		</highlightContext>
	</contexts>
</highlightDefinition>